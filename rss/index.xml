<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Untitled RSS Feed]]></title><description><![CDATA[My personal blog.]]></description><link>https://gtugablue.github.io/blog</link><generator>RSS for Node</generator><lastBuildDate>Thu, 05 Jul 2018 21:57:15 GMT</lastBuildDate><atom:link href="https://gtugablue.github.io/blog/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[How I hacked the international application form of the Barcelona School of Informatics]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>As part of the incoming admission procedure of my Erasmus destination institution, <a href="http://www.fib.upc.edu/">Barcelona School of Informatics</a>, an application form had to be filled with information about me and the courses I planned on attending.a</p>
</div>
<div class="paragraph">
<p>Therefore, there is a section of the form where students can choose from a drop-down list the courses they want to attend. When the "Add" button is pressed, an asynchronous request is sent to the server and the course gets added to the table.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27766229-64b076f2-5ec1-11e7-8824-17a3be3c1c69.png" alt="International application form">
</div>
<div class="title">Figure 1. International application form</div>
</div>
<div class="paragraph">
<p>Unfortunately for me, I noticed one of my courses was not listed because it was not being offered for exchange students. So I replaced the HTML of the drop-down in order to include that specific course that was missing and was able to add it to my list of subjects, since there was no further server-side validation taking place. Obviously, I ended up deleting it, because I did not want someone to later tell me I could not enroll in that course.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_finding_the_vulnerability">Finding the vulnerability</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Eventually, I tested the system for <a href="https://www.owasp.org/index.php/SQL_Injection">SQL Injection</a> by adding an apostrophe to the initials of the subject name:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27766230-64b09bc8-5ec1-11e7-9ab1-4d930c6af9d6.png" alt="SQL Injection vulnerability test">
</div>
<div class="title">Figure 2. SQL Injection vulnerability test</div>
</div>
<div class="paragraph">
<p>Indeed, the system was vulnerable to SQL Injection attacks. The server receives the list of courses selected and replies with the HTML code of the new drop-down, without the already selected courses. The client sends the list of currently selected courses as a string made of their initials separated by commas (e.g. <code>AGT,AM,AMMM</code>), but that string was not being properly escaped before being sent to the database.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exploiting_the_vulnerability">Exploiting the vulnerability</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I am not very experienced with this kind of attacks, but one way of performing them (after finding the vulnerability) is to use the <a href="https://www.w3schools.com/sql/sql_union.asp">UNION operator</a> to join the already existing SELECT statement with a new SELECT statement written by the exploiter. The challenge is to craft a statement that is similar to the original one, since it must contain the same amount of columns and with the same type.</p>
</div>
<div class="paragraph">
<p>If the number of columns in my test string doesn&#8217;t match the number of columns in the original statement, the database will throw the following error:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ORA-01789: query block has incorrect number of result columns.</pre>
</div>
</div>
<div class="paragraph">
<p>Therefore, one way of finding the right amount of columns and their types is by trial and error (<a href="https://websec.ca/kb/sql_injection#MySQL_Tables_And_Columns">but there are faster methods</a>). Fortunately, in this specific case, the whole query was being output to the user, which meant that I could easily count the number of columns and find their types. The original query returned a total of 6 columns with types where the 1st and 4th were numbers and the rest were strings.</p>
</div>
<div class="paragraph">
<p>Now that I had information about the original query, I proceeded with my attempt to do an SQL Injection attack taking advantage of the UNION operator. This was my input string:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>A' UNION
    SELECT
    a1.codi_assig,
    a1.sigles,
    a1.nom,
    a1.credits,
    a1.titulacio,
    a2.quadri
    FROM rriiassig--</pre>
</div>
</div>
<div class="paragraph">
<p>My objective with this string was to replicate the original query, selecting the exact same columns, just to test if everything would work properly. The last two hyphens are used to start an inline comment, which means that the rest of the original query that follows them would be ignored. However, the database replied with the following error:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ORA-00923 FROM keyword not found where expected</pre>
</div>
</div>
<div class="paragraph">
<p>After analyzing the query, I noticed that my string was being changed before being sent to the database:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>A' UNION
    SELECT a1.codi_assig' AND sigles!='
    a1.sigles' AND sigles!='
    a1.nom' AND sigles!='
    a1.credits' AND sigles!='
    a1.titulacio' AND sigles!='
    a2.quadri
    FROM rriiassig--</pre>
</div>
</div>
<div class="paragraph">
<p>Wherever my input had a comma character, it would be replaced by the string <code>' AND sigles !='</code>. As mentioned above, the normal user input would be a list of subjects separated by commas, so the idea of replacing the commas by such string was to select only the subjects with <em>sigles</em> (initials) different to the ones in the input list. The result of this selection would then be the content of the new drop-down list, where the user could continue adding other courses.
This meant that my string could not contain any commas, as these were being replaced by a different text.</p>
</div>
<div class="paragraph">
<p><strong>But how to do a SQL SELECT query for 6 columns without using a comma to separate the different fields?</strong> This is possible by cross joining 6 different subqueries where each of those subqueries returns only one column, such as:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>A' UNION
    SELECT * FROM (SELECT 1 FROM rriiassig)
    CROSS JOIN (SELECT 'aaa' FROM rriiassig)
    CROSS JOIN (SELECT 'bbb' FROM rriiassig)
    CROSS JOIN (SELECT 4 FROM rriiassig)
    CROSS JOIN (SELECT 'ccc' FROM rriiassig)
    CROSS JOIN (SELECT 'Q1' FROM rriiassig) --</pre>
</div>
</div>
<div class="paragraph">
<p>I ran this query and&#8230;&#8203; Oops, the server went down for a couple minutes due to the huge size of my query (cross joining 6 tables). I should have filtered my query by applying a LIMIT to one or more fields. That&#8217;s when I stopped my investigation and emailed the institution with information on the security exploit, so I still don&#8217;t know if the vulnerability gave me access to the database of the international page only or if that database was also used in different locations for different purposes. They answered the day after:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>[&#8230;&#8203;] We&#8217;ve reproduced the bug and looking at the source code, all the application form application uses parametrized SQL except the subject part! [&#8230;&#8203;]"</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Jaume Moral Ros - Facultat d'Inform√†tica de Barcelona
</div>
</div>
<div class="paragraph">
<p>The issue was then fixed in less than a week.</p>
</div>
</div>
</div>]]></description><link>https://gtugablue.github.io/blog/2017/07/11/How-I-hacked-the-international-application-form-of-the-Barcelona-School-of-Informatics.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2017/07/11/How-I-hacked-the-international-application-form-of-the-Barcelona-School-of-Informatics.html</guid><category><![CDATA[Hack]]></category><category><![CDATA[FIB]]></category><category><![CDATA[SQL_Injection]]></category><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Tue, 11 Jul 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[How I hacked the website of CDUP, the Sports Center of the University of Porto]]></title><description><![CDATA[<div class="paragraph">
<p>While checking the gym prices at CDUP, my friend <a href="http://diogomoura.me">Diogo Moura</a> noticed something unusual: a small square on the bottom-left corner that when clicked would display a bar sticking to the bottom of the screen.
I didn&#8217;t capture a screenshot so I recreated the page in Photoshop:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27763930-21e2bcd6-5e85-11e7-9dcc-24b1acba656f.png" alt="Homepage">
</div>
<div class="title">Figure 1. Homepage</div>
</div>
<div class="paragraph">
<p>Diogo is a good guy so he stopped there.</p>
</div>
<div class="paragraph">
<p>I started investigating that bar and noticed it was the <a href="http://phpdebugbar.com/">PHP Debug Bar</a>, useful for debugging purposes during development. It contains some tabs with multiple information about everything that happens in the website. One of the features it provides is a list of the latest HTTP requests made by every user on the website:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27763875-20fd5b06-5e84-11e7-94c5-23dd2a367abf.png" alt="Request list">
</div>
<div class="title">Figure 2. Request list</div>
</div>
<div class="paragraph">
<p>Obviously, this is a big security issue, since I could trace the actions in the website of whoever I wanted. Some of the entries in that list had the text "/login" in the URL field and "POST" in the method field, meaning that they were related to submissions of the administrator login form. By clicking that entry I was able to see all details of that specific request, including the username and the plaintext password that were sent in the body of the request:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>{
   "_token":"YVOzlSSYcaEEkPF24AVNke2KsdvEUZedIwNtHyJo",
   "username":"Admin",
   "password":"XXXXXXXXXXXXXXXX"
}</pre>
</div>
</div>
<div class="paragraph">
<p>So I went to the <a href="http://cdup.up.pt/admin">administrator login form</a> and successfully logged in with the credentials I had just stolen. Now I had access to the backoffice of the whole website and I could manage users, edit content, etc.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27763718-f676d36a-5e80-11e7-92df-0266c105e7a9.png" alt="Editing an entry in the backoffice">
</div>
<div class="title">Figure 3. Editing an entry in the backoffice</div>
</div>
<div class="paragraph">
<p>The issue was reported to CDUP and was fixed quickly by removing the PHP Debug Bar.</p>
</div>]]></description><link>https://gtugablue.github.io/blog/2017/07/03/How-I-hacked-the-website-of-CDUP-the-Sports-Center-of-the-University-of-Porto.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2017/07/03/How-I-hacked-the-website-of-CDUP-the-Sports-Center-of-the-University-of-Porto.html</guid><category><![CDATA[Hack]]></category><category><![CDATA[CDUP]]></category><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Mon, 03 Jul 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[How I accidentally hacked the e-learning platform of the University of Porto (MoodleUP)]]></title><description><![CDATA[<div class="sect1">
<h2 id="_moodleup">MoodleUP</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Moodle is a learning platform designed to provide educators, administrators and learners with a single robust, secure and integrated system to create personalised learning environments.</p>
</div>
<div class="paragraph">
<p>Moodle is widely used in the University of Porto and one of its main uses envolves carrying out digital exams to evaluate the knowledge of students.</p>
</div>
<div class="sect2">
<h3 id="_moodlewatcher">MoodleWatcher</h3>
<div class="paragraph">
<p>In order to avoid cheating in exams, a tool named MoodleWatcher was developed. According to the authors:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>MoodleWatcher consists of a front-end web application that shares code with Moodle in relation to the use of database access. [&#8230;&#8203;]</p>
</div>
<div class="paragraph">
<p>The main purpose of the tool is to provide a simple and efficient monitoring method to be used by teachers in order to assure them of the integrity of the tests and exams carried out using Moodle.</p>
</div>
</blockquote>
<div class="attribution">
&#8212; MATOS, Rodolfo; TORR√ÉO, Sofia; VIEIRA, Tito Carlos S. Moodlewatcher: detection and prevention of fraud when using Moodle quizzes. In: Proceedings of INTED2012 Conference. 2012.
</div>
</div>
<div class="paragraph">
<p><a href="https://sigarra.up.pt/reitoria/pt/pub_geral.show_file?pi_gdoc_id=336206">There is a whole paper explaining the MoodleWatcher tool</a>, so I won&#8217;t be listing here all the features of the system.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_story">The story</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><strong>Procrastinate:</strong> Delay or postpone action; put off doing something.</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Oxford Dictionary
</div>
</div>
<div class="paragraph">
<p>During a study-procrastinate session, I remembered a previously taken Moodle exam where one of the vigilant professors announced something like "Do not cheat during the exam, your actions are being monitored".</p>
</div>
<div class="paragraph">
<p>This made me slightly curious. Was the professor really speaking the truth? Does Moodle have a feature for monitoring students' actions during quizzes? After a bit of research I found the page of MoodleWatcher. And by searching the system for some time I realized that the professor was indeed telling the true, most of the actions were being monitored.</p>
</div>
<div class="paragraph">
<p>MoodleWatcher generates a report for each quiz, listing all unallowed and possibly dangerous actions made by students.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27737877-ad470b04-5da1-11e7-9e8f-d93c4e9e0852.png" alt="MoodleWatcher dashboard">
</div>
<div class="title">Figure 1. MoodleWatcher dashboard</div>
</div>
<div class="paragraph">
<p>During my procrastination, I tried exploiting the system with a basic <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attack</a> on the quiz ID, but the system was protected against such attacks. So I started trying random quiz IDs to see exactly what kind of actions were being tracked. While doing this, I noticed that some of the pages were throwing some strange errors from the Moodle platform and the whole error page from Moodle was being displayed. I am sorry, but I did not capture a screenshot for this.</p>
</div>
<div class="paragraph">
<p>Eventually I gave up on hacking MoodleWatcher and went back to Moodle, ready to restart my studying session. That&#8217;s when I noticed something strange: instead of being logged in my normal account, I was logged in as a user named with a single dot (".").</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27738721-1ad46ba6-5da4-11e7-8a87-c0225547298d.jpg" alt="Logged in as the dot user">
</div>
<div class="title">Figure 2. Logged in as the dot user</div>
</div>
<div class="paragraph">
<p>I pressed the "Save changes" button in the Edit Profile page, without changing any settings, and got taken to my profile page:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27737879-ad4e9572-5da1-11e7-80ed-163c37765808.jpg" alt="Own profile">
</div>
<div class="title">Figure 3. Viewing own profile page</div>
</div>
<div class="paragraph">
<p>All of a sudden I was no longer myself nor the dot user, I was the <strong>Admin User</strong>. And this meant that I had full access to MoodleUP, including the possibility of managing accounts, viewing hidden quizzes, downloading a full backup, changing grades, etc.</p>
</div>
<div class="sect2">
<h3 id="_the_vulnerability">The vulnerability</h3>
<div class="paragraph">
<p>So what exactly allowed me to gain administrator access to MoodleUP? And what does MoodleWatcher have to do with it?
In fact, there was an interesting security vulnerability in MoodleWatcher that allowed anyone to accidentally perform a <a href="https://en.wikipedia.org/wiki/Session_hijacking">session hijacking attack</a>.
When something went wrong while displaying the report, the whole Moodle error page was being shown to the user. Unfortunately, I did not capture a screenshot for this, so I fired up Photoshop and tried to recreate it from memory:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/27739951-42fac4dc-5da8-11e7-995b-c3f4cee33e20.jpg" alt="Error output example">
</div>
<div class="title">Figure 4. Error output example</div>
</div>
<div class="paragraph">
<p>Clearly, the dot user was the account used by the system to fetch all information from Moodle. Then, in case of error, the whole error page was being redirected to the user.</p>
</div>
<div class="paragraph">
<p>Despite not being the safest and most beautiful solution, it did work well as a way of outputting errors, which in the end is what matters. The problem was that the body of the HTTP request was not the only data being redirected to the user. <strong>The HTTP headers were being redirected too! And this includes the <em>Set-Cookie</em> header with the session token.</strong> That&#8217;s the reason why after going back to MoodleUP I was logged in as the dot user.</p>
</div>
<div class="paragraph">
<p>But why did pressing the "Save" button on the Edit Profile page convert me from the dot user to the Admin User of Moodle? I&#8217;m not sure, but I believe they actually are the same account. For some reason, the user name seems to change depending on the active language: "." in Portuguese and "Admin User" in English.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_aftermath">Aftermath</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The issue was reported to the developers behind MoodleWatcher and got solved in a couple days. The fix was simple: redirect only the HTTP body instead of sending also the headers.</p>
</div>
<div class="paragraph">
<p>Eventually, another layer of protection was added by implementing HTTP Basic Authentication to the whole MoodleWatcher platform.</p>
</div>
</div>
</div>]]></description><link>https://gtugablue.github.io/blog/2017/06/30/How-I-accidentally-hacked-the-e-learning-platform-of-the-University-of-Porto-MoodleUP.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2017/06/30/How-I-accidentally-hacked-the-e-learning-platform-of-the-University-of-Porto-MoodleUP.html</guid><category><![CDATA[Hack]]></category><category><![CDATA[Moodle]]></category><category><![CDATA[UP]]></category><category><![CDATA[MoodleUP]]></category><category><![CDATA[MoodleWatcher]]></category><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello World!]]></title><description><![CDATA[<div class="paragraph">
<p>This is the first post of my new personal blog, where I will briefly present myself and the purpose of this blog.</p>
</div>
<div class="paragraph">
<p>I am a Portuguese student currently enrolled in the Master in Informatics and Computer Engineering at the Faculty of Engineering of the University of Porto. You can find more information about me and what I do here: <a href="http://gustavosilva.me">gustavosilva.me</a></p>
</div>
<div class="paragraph">
<p>At the moment, I have some ideas ready to be published related to my recent <em>hacktivities</em>. After that, I will either let it die or write about whatever crosses my mind.</p>
</div>]]></description><link>https://gtugablue.github.io/blog/2017/06/29/Hello-World.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2017/06/29/Hello-World.html</guid><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Thu, 29 Jun 2017 00:00:00 GMT</pubDate></item></channel></rss>