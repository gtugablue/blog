<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Untitled RSS Feed]]></title><description><![CDATA[My personal blog.]]></description><link>https://gtugablue.github.io/blog</link><generator>RSS for Node</generator><lastBuildDate>Tue, 23 Oct 2018 19:14:58 GMT</lastBuildDate><atom:link href="https://gtugablue.github.io/blog/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[A failed attempt at hacking SIGARRA, the management system of the University of Porto]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>SIGARRA is the Information System for the Aggregated Management of Resources and Academic Records of the University of Porto. It serves 30000+ students, as well as professors and other employees.</p>
</div>
<div class="paragraph">
<p>As part of my work on my master&#8217;s thesis, I sometimes consulted similar works from previous students, by accessing the list of previous dissertations of my course, available at <a href="https://sigarra.up.pt/feup/pt/teses.lista_teses?p_curso=742" class="bare">https://sigarra.up.pt/feup/pt/teses.lista_teses?p_curso=742</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/44003144-29f40a86-9e46-11e8-8578-fa804c9c875d.png" alt="List of previous dissertations">
</div>
<div class="title">Figure 1. List of previous dissertations</div>
</div>
<div class="paragraph">
<p>Each entry on the list contains the title of the document, the name of the student, some relevant dates and the name of the supervisor. On the right side of the page, a sidebar allows the user to filter the entries, change the sorting method, change the number of entries per page or export them to an Excel file. When you chose to change the ordering of the list a couple of parameters are added to the URL, one of them being "p_ord_campo", which translates to "order field parameter" and defines the name of the field that will be considered for sorting. The options in the sidebar allow us to change this field to one of the following values:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>NOME (author&#8217;s name)</p>
</li>
<li>
<p>TITULO (document title)</p>
</li>
<li>
<p>GRAU (type of degree)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>However, this input field was not properly sanitized, which meant that it was possible to write malicious SQL code instead of those expected values, therefore performing a <a href="https://www.owasp.org/index.php/SQL_Injection">SQL Injection</a> attack.</p>
</div>
<div class="paragraph">
<p><strong>But how did I know that the field was vulnerable and how could it be exploited?</strong> A possible way of defining a query to provide the data displayed on the list of dissertations would be as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>SELECT * FROM thesis ORDER BY TITULO ASC</pre>
</div>
</div>
<div class="paragraph">
<p>If, in the above query, we replace the word <code>TITULO</code> by the name of a different field, the resulting page outputs the same list but sorted in a different manner. If the field is vulnerable and the input is not properly sanitized, it is possible to build a query that sorts the list in different ways depending on the output of a subquery:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>SELECT * FROM thesis ORDER BY
CASE WHEN (
  SELECT 1 FROM dual
) &gt; 0
THEN
  NOME
ELSE
  TITULO
END</pre>
</div>
</div>
<div class="paragraph">
<p>The subquery <code>SELECT 1 FROM dual</code> always returns a single row with value 1. Since 1 is greater than zero, the list of thesis gets sorted by the field NOME. Likewise, if we change the subquery to return the value 0, the list gets sorted by the field TITULO. Doing this test, it can be concluded that our SQL injected code is indeed being executed and that we have found a method of reading the value of any SQL statement we define, as long as it returns a binary value. Therefore, it should be possible to access sensitive data stored in SIGARRA&#8217;s database, such as a personal e-mail adddress, by filling the "p_ord_campo" field with a string such as:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>CASE WHEN (
  SELECT personal_email FROM user_accounts WHERE user_code = 'up201304143'
) &gt; 'a'
THEN
  NOME
ELSE
  TITULO
END</pre>
</div>
</div>
<div class="paragraph">
<p>SIGARRA runs an Oracle Database. In Oracle SQL, the <code>&gt;</code> operator, when used with strings, returns true if the first string comes after the second one alphabetically. With this input, if the first char of the e-mail address of user "up201304143" has a higher value than the value of "a" in the <a href="https://en.wikipedia.org/wiki/ASCII">ASCII table</a>, then the list of thesis gets sorted by the field NOME, otherwise it gets sorted by the field TITULO. If we repeat this process using chars other than "a" we can find out what is the value of the first char in the e-mail address that we want to read. Then, the process can be repeated by appending more chars to the string in order to fully read the user&#8217;s personal e-mail address. Ultimately, this process can be automated by building a script that reads the whole field by performing a <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">binary search</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_additional_layer_of_protection">Additional layer of protection</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It turns out that I was unable to read any sensitive data from SIGARRA&#8217;s database by using this method. In fact, many of my queries would result in a special access denied error:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/44003231-35eaee58-9e47-11e8-9744-80b3b7546942.png" alt="Error being thrown for some of my queries">
</div>
<div class="title">Figure 2. Error being thrown for some of my queries (translated and adapted)</div>
</div>
<div class="paragraph">
<p>I believe this was caused by a second layer of protection in SIGARRA&#8217;s system, a <a href="https://en.wikipedia.org/wiki/Web_application_firewall">Web Application Firewall</a> (WAF) that was blocking many of my queries. In fact, a simple query such as the one above mentioned would fail, because the <code>WHERE</code> clause is blocked by the firewall. Therefore, I needed to change my query to something that did not include specific terms, similarly to <a href="https://gustavosilva.me/blog/2017/07/11/How-I-hacked-the-international-application-form-of-the-Barcelona-School-of-Informatics.html">what I described in a previous post</a>.</p>
</div>
<div class="paragraph">
<p>The main challenge for me to read a particular value from the database was to ensure that the subquery (inside the CASE statement) returned a single-row and single-column value, so that a comparison operator (such as <code>&gt;</code>) could be applied to it. To build such query, I had to:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Bypass the WAF</p>
</li>
<li>
<p>Understand the structure of the database, in terms of table names and columns</p>
</li>
<li>
<p>Ensure the result contains only one row</p>
</li>
<li>
<p>Ensure the result contains only one column</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>First, to help circunventing the limitations imposed by the WAF, I built a non-comprehensive list of SQL commands, clauses, pseudocolumns and identifiers that were being blocked:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>avg()</p>
</li>
<li>
<p>count()</p>
</li>
<li>
<p>database_name</p>
</li>
<li>
<p>IN</p>
</li>
<li>
<p>max()</p>
</li>
<li>
<p>min()</p>
</li>
<li>
<p>rownum</p>
</li>
<li>
<p>SELECT CASE</p>
</li>
<li>
<p>sum()</p>
</li>
<li>
<p>table_name</p>
</li>
<li>
<p>UNION</p>
</li>
<li>
<p>WHERE</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>So, to exploit the vulnerability, I had to build a query that extracted sensitive information without using any blocked word and returning a single row and column.</p>
</div>
<div class="paragraph">
<p>But first, to understand the structure of a database we can list the entries of the "all_tables" table, which contains information on all the tables in the system. For example, to fetch the name of the first table the following query can be executed:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>SELECT table_name FROM all_tables WHERE rownum = 1</pre>
</div>
</div>
<div class="paragraph">
<p>The problem with this query is that it does not bypass the WAF due to the use of two blocked words: <code>table_name</code> and <code>WHERE</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_filtering_results_without_the_where_clause">Filtering results without the WHERE clause</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>But how to filter results without using the WHERE clause?</strong> There might be a couple ways. One of them is to take advantage of a feature of Oracle databases called <a href="https://docs.oracle.com/cd/B19306_01/server.102/b14200/queries003.htm">Hierarchical Queries</a>. Although these are aimed to be used with tables that contain hierarchical data, we can exploit these constructs to be able to filter the results based on a condition. Look at these two queries:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>SELECT owner FROM all_tables WHERE iot_name = 'CHNF$_CLAUSES'</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre>SELECT owner FROM all_tables START WITH iot_name = 'CHNF$_CLAUSES' CONNECT BY 1 = 0</pre>
</div>
</div>
<div class="paragraph">
<p>These queries return the same result, with the advantage that the latter is not blocked by the WAF. Feel free to check the documentation on <a href="https://docs.oracle.com/cd/B19306_01/server.102/b14200/queries003.htm">Hierarchical Queries</a> for more information on how they work, but the general idea of the second query is that it traverses the results, considering the initial entries to be the ones that have <code>iot_name = 'CHNF$_CLAUSES'</code> and then continuing the traversal to entries that match the condition <code>1 = 0</code>. Since this condition is always false, only the root entry is returned.</p>
</div>
<div class="paragraph">
<p>This allows us to bypass the block on the <code>WHERE</code> clause, yet still does not allow for an easy selection of a single row, because the <code>rownum</code> pseudocolumn is also blocked by the WAF and cannot be used as a filter. Nevertheless, more complex conditions can be defined to ensure only one entry is returned, following a trial-and-error approach.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reading_a_table_name_without_writing_table_name">Reading a table name without writing "table_name"</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Being able to filter results and limiting them to one row gets us one step closer from exploiting this SQL injection vulnerability. But we still need to find the names of the tables in the database, although the WAF disallows queries containing the word <code>table_name</code>. This means that we cannot directly select the column <code>table_name</code> from the table <code>all_tables</code>.</p>
</div>
<div class="paragraph">
<p>To avoid this, one might try to select all columns (using the <code>*</code> operator) instead of specifying the name of the table we want to fetch. However, this procedure violates one of the aforementioned requirements that forces us to build queries with a single-column output.</p>
</div>
<div class="paragraph">
<p>What other options are available? One of the features of Oracle databases since version 11g is <a href="https://www.oracle.com/technetwork/articles/sql/11g-pivot-097235.html">pivoting and unpivoting</a>. In particular, pivoting can be used to select from a table excluding some columns, <a href="https://stackoverflow.com/a/33220953/1568560">as demonstrated in a stack overflow post</a>. This means that it might be possible to select all columns from <code>all_tables</code> but excluding all columns except <code>table_name</code>. This would result in only the <code>table_name</code> column being selected. The syntax of a <code>PIVOT</code> is something like:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>SELECT * FROM
  table
PIVOT
(
  aggregate_function(column)
  FOR column
  IN ( expr1, expr2, ... expr_n) | subquery
)</pre>
</div>
</div>
<div class="paragraph">
<p>However, although the <code>PIVOT</code> clause is accepted by the WAF, the <code>IN</code> operator is blocked. Since we need the <code>IN</code> operator to match the required syntax for pivoting, <strong>it is not possible to use this method to bypass the WAF</strong> and read the <code>table_name</code> column.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_end">The end</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Having failed at bypassing the WAF using the techniques mentioned above (and others), I was preparing to give up on exploiting this vulnerability. Yet, some time later, I decided to give it another shot and see if I could come up with new ideas to circunvent the WAF. To my surprise, this time all of my queries were failing, including the ones that used to work before&#8230;&#8203; It seemed like the issue had been fixed!</p>
</div>
<div class="paragraph">
<p>Anyway, I emailed the developers behind SIGARRA with details on the vulnerability and they confirmed me that they had seen my intrusion attempts in their logs and quickly solved the issue. Therefore I was unable to exploit the system, but happy to know that my academic data is well secured.</p>
</div>
</div>
</div>]]></description><link>https://gtugablue.github.io/blog/2018/08/12/A-failed-attempt-at-hacking-SIGARRA-the-management-system-of-the-University-of-Porto.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2018/08/12/A-failed-attempt-at-hacking-SIGARRA-the-management-system-of-the-University-of-Porto.html</guid><category><![CDATA[Hack]]></category><category><![CDATA[SIGARRA]]></category><category><![CDATA[SQL_Injection]]></category><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Sun, 12 Aug 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[How I hacked the international application form of the Barcelona School of Informatics]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>As part of the incoming admission procedure of my Erasmus destination institution, <a href="http://www.fib.upc.edu/">Barcelona School of Informatics</a>, an application form had to be filled with information about me and the courses I planned on attending.</p>
</div>
<div class="paragraph">
<p>Therefore, there is a section of the form where students can choose from a drop-down list the courses they want to attend. When the "Add" button is pressed, an asynchronous request is sent to the server and the course gets added to the table.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350581-1181f43c-80a9-11e8-86ab-7817de0ff969.png" alt="International application form">
</div>
<div class="title">Figure 1. International application form</div>
</div>
<div class="paragraph">
<p>Unfortunately for me, I noticed one of my courses was not listed because it was not being offered for exchange students. So I replaced the HTML of the drop-down in order to include that specific course that was missing and was able to add it to my list of subjects, since there was no further server-side validation taking place. Obviously, I ended up deleting it, because I did not want someone to later tell me I could not enroll in that course.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_finding_the_vulnerability">Finding the vulnerability</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Eventually, I tested the system for <a href="https://www.owasp.org/index.php/SQL_Injection">SQL Injection</a> by adding an apostrophe to the initials of the subject name:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350582-11b3b666-80a9-11e8-9bf1-95e3ea301625.png" alt="SQL Injection vulnerability test">
</div>
<div class="title">Figure 2. SQL Injection vulnerability test</div>
</div>
<div class="paragraph">
<p>Indeed, the system was vulnerable to SQL Injection attacks. The server receives the list of courses selected and replies with the HTML code of the new drop-down, without the already selected courses. The client sends the list of currently selected courses as a string made of their initials separated by commas (e.g. <code>AGT,AM,AMMM</code>), but that string was not being properly escaped before being sent to the database.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exploiting_the_vulnerability">Exploiting the vulnerability</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I am not very experienced with this kind of attacks, but one way of performing them (after finding the vulnerability) is to use the <a href="https://www.w3schools.com/sql/sql_union.asp">UNION operator</a> to join the already existing SELECT statement with a new SELECT statement written by the exploiter. The challenge is to craft a statement that is similar to the original one, since it must contain the same amount of columns and with the same type.</p>
</div>
<div class="paragraph">
<p>If the number of columns in my test string doesn&#8217;t match the number of columns in the original statement, the database will throw the following error:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ORA-01789: query block has incorrect number of result columns.</pre>
</div>
</div>
<div class="paragraph">
<p>Therefore, one way of finding the right amount of columns and their types is by trial and error (<a href="https://websec.ca/kb/sql_injection#MySQL_Tables_And_Columns">but there are faster methods</a>). Fortunately, in this specific case, the whole query was being output to the user, which meant that I could easily count the number of columns and find their types. The original query returned a total of 6 columns with types where the 1st and 4th were numbers and the rest were strings.</p>
</div>
<div class="paragraph">
<p>Now that I had information about the original query, I proceeded with my attempt to do an SQL Injection attack taking advantage of the UNION operator. This was my input string:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>A' UNION
    SELECT
    a1.codi_assig,
    a1.sigles,
    a1.nom,
    a1.credits,
    a1.titulacio,
    a2.quadri
    FROM rriiassig--</pre>
</div>
</div>
<div class="paragraph">
<p>My objective with this string was to replicate the original query, selecting the exact same columns, just to test if everything would work properly. The last two hyphens are used to start an inline comment, which means that the rest of the original query that follows them would be ignored. However, the database replied with the following error:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>ORA-00923 FROM keyword not found where expected</pre>
</div>
</div>
<div class="paragraph">
<p>After analyzing the query, I noticed that my string was being changed before being sent to the database:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>A' UNION
    SELECT a1.codi_assig' AND sigles!='
    a1.sigles' AND sigles!='
    a1.nom' AND sigles!='
    a1.credits' AND sigles!='
    a1.titulacio' AND sigles!='
    a2.quadri
    FROM rriiassig--</pre>
</div>
</div>
<div class="paragraph">
<p>Wherever my input had a comma character, it would be replaced by the string <code>' AND sigles !='</code>. As mentioned above, the normal user input would be a list of subjects separated by commas, so the idea of replacing the commas by such string was to select only the subjects with <em>sigles</em> (initials) different to the ones in the input list. The result of this selection would then be the content of the new drop-down list, where the user could continue adding other courses.
This meant that my string could not contain any commas, as these were being replaced by a different text.</p>
</div>
<div class="paragraph">
<p><strong>But how to do a SQL SELECT query for 6 columns without using a comma to separate the different fields?</strong> This is possible by cross joining 6 different subqueries where each of those subqueries returns only one column, such as:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>A' UNION
    SELECT * FROM (SELECT 1 FROM rriiassig)
    CROSS JOIN (SELECT 'aaa' FROM rriiassig)
    CROSS JOIN (SELECT 'bbb' FROM rriiassig)
    CROSS JOIN (SELECT 4 FROM rriiassig)
    CROSS JOIN (SELECT 'ccc' FROM rriiassig)
    CROSS JOIN (SELECT 'Q1' FROM rriiassig) --</pre>
</div>
</div>
<div class="paragraph">
<p>I ran this query and&#8230;&#8203; Oops, the server went down for a couple minutes due to the huge size of my query (cross joining 6 tables). I should have filtered my query by applying a LIMIT to one or more fields. That&#8217;s when I stopped my investigation and emailed the institution with information on the security exploit, so I still don&#8217;t know if the vulnerability gave me access to the database of the international page only or if that database was also used in different locations for different purposes. They answered the day after:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>[&#8230;&#8203;] We&#8217;ve reproduced the bug and looking at the source code, all the application form application uses parametrized SQL except the subject part! [&#8230;&#8203;]"</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Jaume Moral Ros - Facultat d'Informàtica de Barcelona
</div>
</div>
<div class="paragraph">
<p>The issue was then fixed in less than a week.</p>
</div>
</div>
</div>]]></description><link>https://gtugablue.github.io/blog/2017/07/11/How-I-hacked-the-international-application-form-of-the-Barcelona-School-of-Informatics.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2017/07/11/How-I-hacked-the-international-application-form-of-the-Barcelona-School-of-Informatics.html</guid><category><![CDATA[Hack]]></category><category><![CDATA[FIB]]></category><category><![CDATA[SQL_Injection]]></category><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Tue, 11 Jul 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[How I hacked the website of CDUP, the Sports Center of the University of Porto]]></title><description><![CDATA[<div class="paragraph">
<p>While checking the gym prices at CDUP, my friend <a href="http://diogomoura.me">Diogo Moura</a> noticed something unusual: a small square on the bottom-left corner that when clicked would display a bar sticking to the bottom of the screen.
I didn&#8217;t capture a screenshot so I recreated the page in Photoshop:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350758-be761614-80a9-11e8-901c-5e379a5d8e39.png" alt="Homepage">
</div>
<div class="title">Figure 1. Homepage</div>
</div>
<div class="paragraph">
<p>Diogo is a good guy so he stopped there.</p>
</div>
<div class="paragraph">
<p>I started investigating that bar and noticed it was the <a href="http://phpdebugbar.com/">PHP Debug Bar</a>, useful for debugging purposes during development. It contains some tabs with multiple information about everything that happens in the website. One of the features it provides is a list of the latest HTTP requests made by every user on the website:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350574-00b2783e-80a9-11e8-82a1-94794205a59f.png" alt="Request list">
</div>
<div class="title">Figure 2. Request list</div>
</div>
<div class="paragraph">
<p>Obviously, this is a big security issue, since I could trace the actions in the website of whoever I wanted. Some of the entries in that list had the text "/login" in the URL field and "POST" in the method field, meaning that they were related to submissions of the administrator login form. By clicking that entry I was able to see all details of that specific request, including the username and the plaintext password that were sent in the body of the request:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>{
   "_token":"YVOzlSSYcaEEkPF24AVNke2KsdvEUZedIwNtHyJo",
   "username":"Admin",
   "password":"XXXXXXXXXXXXXXXX"
}</pre>
</div>
</div>
<div class="paragraph">
<p>So I went to the <a href="http://cdup.up.pt/admin">administrator login form</a> and successfully logged in with the credentials I had just stolen. Now I had access to the backoffice of the whole website and I could manage users, edit content, etc.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350573-00843f64-80a9-11e8-9b70-a8b23d565e33.png" alt="Editing an entry in the backoffice">
</div>
<div class="title">Figure 3. Editing an entry in the backoffice</div>
</div>
<div class="paragraph">
<p>The issue was reported to CDUP and was fixed quickly by removing the PHP Debug Bar.</p>
</div>]]></description><link>https://gtugablue.github.io/blog/2017/07/03/How-I-hacked-the-website-of-CDUP-the-Sports-Center-of-the-University-of-Porto.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2017/07/03/How-I-hacked-the-website-of-CDUP-the-Sports-Center-of-the-University-of-Porto.html</guid><category><![CDATA[Hack]]></category><category><![CDATA[CDUP]]></category><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Mon, 03 Jul 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[How I accidentally hacked the e-learning platform of the University of Porto (MoodleUP)]]></title><description><![CDATA[<div class="sect1">
<h2 id="_moodleup">MoodleUP</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Moodle is a learning platform designed to provide educators, administrators and learners with a single robust, secure and integrated system to create personalised learning environments.</p>
</div>
<div class="paragraph">
<p>Moodle is widely used in the University of Porto and one of its main uses envolves carrying out digital exams to evaluate the knowledge of students.</p>
</div>
<div class="sect2">
<h3 id="_moodlewatcher">MoodleWatcher</h3>
<div class="paragraph">
<p>In order to avoid cheating in exams, a tool named MoodleWatcher was developed. According to the authors:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>MoodleWatcher consists of a front-end web application that shares code with Moodle in relation to the use of database access. [&#8230;&#8203;]</p>
</div>
<div class="paragraph">
<p>The main purpose of the tool is to provide a simple and efficient monitoring method to be used by teachers in order to assure them of the integrity of the tests and exams carried out using Moodle.</p>
</div>
</blockquote>
<div class="attribution">
&#8212; MATOS, Rodolfo; TORRÃO, Sofia; VIEIRA, Tito Carlos S. Moodlewatcher: detection and prevention of fraud when using Moodle quizzes. In: Proceedings of INTED2012 Conference. 2012.
</div>
</div>
<div class="paragraph">
<p><a href="https://sigarra.up.pt/reitoria/pt/pub_geral.show_file?pi_gdoc_id=336206">There is a whole paper explaining the MoodleWatcher tool</a>, so I won&#8217;t be listing here all the features of the system.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_story">The story</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><strong>Procrastinate:</strong> Delay or postpone action; put off doing something.</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Oxford Dictionary
</div>
</div>
<div class="paragraph">
<p>During a study-procrastinate session, I remembered a previously taken Moodle exam where one of the vigilant professors announced something like "Do not cheat during the exam, your actions are being monitored".</p>
</div>
<div class="paragraph">
<p>This made me slightly curious. Was the professor really speaking the truth? Does Moodle have a feature for monitoring students' actions during quizzes? After a bit of research I found the page of MoodleWatcher. And by searching the system for some time I realized that the professor was indeed telling the true, most of the actions were being monitored.</p>
</div>
<div class="paragraph">
<p>MoodleWatcher generates a report for each quiz, listing all unallowed and possibly dangerous actions made by students.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350533-e0ef8474-80a8-11e8-818c-1645355e2550.png" alt="MoodleWatcher dashboard">
</div>
<div class="title">Figure 1. MoodleWatcher dashboard</div>
</div>
<div class="paragraph">
<p>During my procrastination, I tried exploiting the system with a basic <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attack</a> on the quiz ID, but the system was protected against such attacks. So I started trying random quiz IDs to see exactly what kind of actions were being tracked. While doing this, I noticed that some of the pages were throwing some strange errors from the Moodle platform and the whole error page from Moodle was being displayed. I am sorry, but I did not capture a screenshot for this.</p>
</div>
<div class="paragraph">
<p>Eventually I gave up on hacking MoodleWatcher and went back to Moodle, ready to restart my studying session. That&#8217;s when I noticed something strange: instead of being logged in my normal account, I was logged in as a user named with a single dot (".").</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350536-e144e36a-80a8-11e8-96f7-8f58e82fdb80.jpg" alt="Logged in as the dot user">
</div>
<div class="title">Figure 2. Logged in as the dot user</div>
</div>
<div class="paragraph">
<p>I pressed the "Save changes" button in the Edit Profile page, without changing any settings, and got taken to my profile page:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350534-e119adb2-80a8-11e8-8456-96cadccc0a81.jpg" alt="Own profile">
</div>
<div class="title">Figure 3. Viewing own profile page</div>
</div>
<div class="paragraph">
<p>All of a sudden I was no longer myself nor the dot user, I was the <strong>Admin User</strong>. And this meant that I had full access to MoodleUP, including the possibility of managing accounts, viewing hidden quizzes, downloading a full backup, changing grades, etc.</p>
</div>
<div class="sect2">
<h3 id="_the_vulnerability">The vulnerability</h3>
<div class="paragraph">
<p>So what exactly allowed me to gain administrator access to MoodleUP? And what does MoodleWatcher have to do with it?
In fact, there was an interesting security vulnerability in MoodleWatcher that allowed anyone to accidentally perform a <a href="https://en.wikipedia.org/wiki/Session_hijacking">session hijacking attack</a>.
When something went wrong while displaying the report, the whole Moodle error page was being shown to the user. Unfortunately, I did not capture a screenshot for this, so I fired up Photoshop and tried to recreate it from memory:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://user-images.githubusercontent.com/3010353/42350537-e17026e2-80a8-11e8-8f81-6157c1e27639.jpg" alt="Error output example">
</div>
<div class="title">Figure 4. Error output example</div>
</div>
<div class="paragraph">
<p>Clearly, the dot user was the account used by the system to fetch all information from Moodle. Then, in case of error, the whole error page was being redirected to the user.</p>
</div>
<div class="paragraph">
<p>Despite not being the safest and most beautiful solution, it did work well as a way of outputting errors, which in the end is what matters. The problem was that the body of the HTTP request was not the only data being redirected to the user. <strong>The HTTP headers were being redirected too! And this includes the <em>Set-Cookie</em> header with the session token.</strong> That&#8217;s the reason why after going back to MoodleUP I was logged in as the dot user.</p>
</div>
<div class="paragraph">
<p>But why did pressing the "Save" button on the Edit Profile page convert me from the dot user to the Admin User of Moodle? I&#8217;m not sure, but I believe they actually are the same account. For some reason, the user name seems to change depending on the active language: "." in Portuguese and "Admin User" in English.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_aftermath">Aftermath</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The issue was reported to the developers behind MoodleWatcher and got solved in a couple days. The fix was simple: redirect only the HTTP body instead of sending also the headers.</p>
</div>
<div class="paragraph">
<p>Eventually, another layer of protection was added by implementing HTTP Basic Authentication to the whole MoodleWatcher platform.</p>
</div>
</div>
</div>]]></description><link>https://gtugablue.github.io/blog/2017/06/30/How-I-accidentally-hacked-the-e-learning-platform-of-the-University-of-Porto-MoodleUP.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2017/06/30/How-I-accidentally-hacked-the-e-learning-platform-of-the-University-of-Porto-MoodleUP.html</guid><category><![CDATA[Hack]]></category><category><![CDATA[Moodle]]></category><category><![CDATA[UP]]></category><category><![CDATA[MoodleUP]]></category><category><![CDATA[MoodleWatcher]]></category><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello World!]]></title><description><![CDATA[<div class="paragraph">
<p>This is the first post of my new personal blog, where I will briefly present myself and the purpose of this blog.</p>
</div>
<div class="paragraph">
<p>I am a Portuguese student currently enrolled in the Master in Informatics and Computer Engineering at the Faculty of Engineering of the University of Porto. You can find more information about me and what I do here: <a href="http://gustavosilva.me">gustavosilva.me</a></p>
</div>
<div class="paragraph">
<p>At the moment, I have some ideas ready to be published related to my recent <em>hacktivities</em>. After that, I will either let it die or write about whatever crosses my mind.</p>
</div>]]></description><link>https://gtugablue.github.io/blog/2017/06/29/Hello-World.html</link><guid isPermaLink="true">https://gtugablue.github.io/blog/2017/06/29/Hello-World.html</guid><dc:creator><![CDATA[Gustavo Silva]]></dc:creator><pubDate>Thu, 29 Jun 2017 00:00:00 GMT</pubDate></item></channel></rss>